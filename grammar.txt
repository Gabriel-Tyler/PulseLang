program    -> declaration* EOF ;

declaration -> funDecl | varDecl | statement ;

funDecl    -> "fun" function ;
function   -> IDENTIFIER "(" parameters? ")" block ;
parameters -> IDENTIFIER ( "," IDENTIFIER )* ;

varDecl    -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement  -> exprStmt | ifStmt | printStmt
            | whileStmt | forStmt | block | returnStmt ;

exprStmt   -> expression ";" ;
ifStmt     -> "if" "(" expression ")" statement ( "else" statement )? ;
printStmt  -> "print" expression ";" ;
block      -> "{" declaration* "}" ;
returnStmt -> "return" expression? ";" ;

whileStmt  -> "while" "(" expression ")" statement ;
forStmt    -> "for" "(" ( varDecl | exprStmt | ";" )
              expression? ";"
              expression? ")" statement ;

expression -> assignment ;

assignment -> IDENTIFIER "=" assignment | logic_or ;

logic_or   -> logic_and ( "or" logic_and)* ;
logic_and  -> equality ( "and" equality)* ;

equality   -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       -> factor ( ( "-" | "+" ) factor )* ;
factor     -> unary ( ( "/" | "*" ) unary )* ;
unary      -> ( "!" | "-" ) unary | call ;

call       -> primary ( "(" arguments? ")" )* ;
arguments  -> expression ( "," expression )* ;

array      -> "[" expression ( "," expression )* "]" ;

primary    -> NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")"
            | array
            | IDENTIFIER ;
